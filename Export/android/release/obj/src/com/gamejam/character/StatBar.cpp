// Generated by Haxe 3.4.2
#include <hxcpp.h>

#ifndef INCLUDED_com_gamejam_character_StatBar
#include <com/gamejam/character/StatBar.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d941454f8d559a6a_30_new,"com.gamejam.character.StatBar","new",0xc206aab5,"com.gamejam.character.StatBar.new","com/gamejam/character/StatBar.hx",30,0x7815039e)
HX_LOCAL_STACK_FRAME(_hx_pos_d941454f8d559a6a_55_updateStat,"com.gamejam.character.StatBar","updateStat",0xb08d18c8,"com.gamejam.character.StatBar.updateStat","com/gamejam/character/StatBar.hx",55,0x7815039e)
HX_LOCAL_STACK_FRAME(_hx_pos_d941454f8d559a6a_59_drawStatBar,"com.gamejam.character.StatBar","drawStatBar",0xe0d49e10,"com.gamejam.character.StatBar.drawStatBar","com/gamejam/character/StatBar.hx",59,0x7815039e)
HX_LOCAL_STACK_FRAME(_hx_pos_d941454f8d559a6a_11_boot,"com.gamejam.character.StatBar","boot",0xfbe7b43d,"com.gamejam.character.StatBar.boot","com/gamejam/character/StatBar.hx",11,0x7815039e)
HX_LOCAL_STACK_FRAME(_hx_pos_d941454f8d559a6a_12_boot,"com.gamejam.character.StatBar","boot",0xfbe7b43d,"com.gamejam.character.StatBar.boot","com/gamejam/character/StatBar.hx",12,0x7815039e)
HX_LOCAL_STACK_FRAME(_hx_pos_d941454f8d559a6a_13_boot,"com.gamejam.character.StatBar","boot",0xfbe7b43d,"com.gamejam.character.StatBar.boot","com/gamejam/character/StatBar.hx",13,0x7815039e)
HX_LOCAL_STACK_FRAME(_hx_pos_d941454f8d559a6a_14_boot,"com.gamejam.character.StatBar","boot",0xfbe7b43d,"com.gamejam.character.StatBar.boot","com/gamejam/character/StatBar.hx",14,0x7815039e)
HX_LOCAL_STACK_FRAME(_hx_pos_d941454f8d559a6a_15_boot,"com.gamejam.character.StatBar","boot",0xfbe7b43d,"com.gamejam.character.StatBar.boot","com/gamejam/character/StatBar.hx",15,0x7815039e)
HX_LOCAL_STACK_FRAME(_hx_pos_d941454f8d559a6a_17_boot,"com.gamejam.character.StatBar","boot",0xfbe7b43d,"com.gamejam.character.StatBar.boot","com/gamejam/character/StatBar.hx",17,0x7815039e)
HX_LOCAL_STACK_FRAME(_hx_pos_d941454f8d559a6a_18_boot,"com.gamejam.character.StatBar","boot",0xfbe7b43d,"com.gamejam.character.StatBar.boot","com/gamejam/character/StatBar.hx",18,0x7815039e)
HX_LOCAL_STACK_FRAME(_hx_pos_d941454f8d559a6a_19_boot,"com.gamejam.character.StatBar","boot",0xfbe7b43d,"com.gamejam.character.StatBar.boot","com/gamejam/character/StatBar.hx",19,0x7815039e)
namespace com{
namespace gamejam{
namespace character{

void StatBar_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d941454f8d559a6a_30_new)
HXLINE(  32)		super::__construct();
HXLINE(  34)		this->border =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  35)		this->border->set_width(::com::gamejam::character::StatBar_obj::BAR_WIDTH);
HXLINE(  36)		this->border->set_height(::com::gamejam::character::StatBar_obj::BAR_HEIGHT);
HXLINE(  37)		this->addChild(this->border);
HXLINE(  39)		this->borderMask =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  40)		this->borderMask->set_width(::com::gamejam::character::StatBar_obj::FILL_WIDTH);
HXLINE(  41)		this->borderMask->set_height(::com::gamejam::character::StatBar_obj::FILL_HEIGHT);
HXLINE(  42)		this->addChild(this->borderMask);
HXLINE(  44)		this->fill =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  45)		this->fill->set_width(::com::gamejam::character::StatBar_obj::FILL_WIDTH);
HXLINE(  46)		this->fill->set_height(::com::gamejam::character::StatBar_obj::FILL_HEIGHT);
HXLINE(  47)		this->addChild(this->fill);
HXLINE(  49)		this->drawStatBar(((Float)100.0));
            	}

Dynamic StatBar_obj::__CreateEmpty() { return new StatBar_obj; }

void *StatBar_obj::_hx_vtable = 0;

Dynamic StatBar_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< StatBar_obj > _hx_result = new StatBar_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool StatBar_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x7b80655d;
		}
	}
}

void StatBar_obj::updateStat(Float dT){
            	HX_STACKFRAME(&_hx_pos_d941454f8d559a6a_55_updateStat)
HXDLIN(  55)		Float _hx_tmp = this->statValue;
HXDLIN(  55)		this->statValue = (_hx_tmp + (dT * this->deltaOverTime));
            	}


HX_DEFINE_DYNAMIC_FUNC1(StatBar_obj,updateStat,(void))

void StatBar_obj::drawStatBar(Float fillPct){
            	HX_STACKFRAME(&_hx_pos_d941454f8d559a6a_59_drawStatBar)
HXLINE(  61)		this->border->get_graphics()->beginFill(::com::gamejam::character::StatBar_obj::BORDER_COLOR,(int)1);
HXLINE(  62)		this->border->get_graphics()->drawRoundRect((int)0,(int)0,::com::gamejam::character::StatBar_obj::BAR_WIDTH,::com::gamejam::character::StatBar_obj::BAR_HEIGHT,(int)20,(int)20);
HXLINE(  63)		this->border->get_graphics()->endFill();
HXLINE(  65)		this->borderMask->get_graphics()->beginFill(::com::gamejam::character::StatBar_obj::MASK_COLOR,(int)1);
HXLINE(  66)		this->borderMask->get_graphics()->drawRoundRect(::com::gamejam::character::StatBar_obj::BORDER_SIZE,::com::gamejam::character::StatBar_obj::BORDER_SIZE,::com::gamejam::character::StatBar_obj::FILL_WIDTH,::com::gamejam::character::StatBar_obj::FILL_HEIGHT,(int)20,(int)20);
HXLINE(  67)		this->borderMask->get_graphics()->endFill();
HXLINE(  69)		this->fill->get_graphics()->beginFill(::com::gamejam::character::StatBar_obj::FILL_COLOR,(int)1);
HXLINE(  70)		 ::openfl::display::Graphics _hx_tmp = this->fill->get_graphics();
HXDLIN(  70)		int _hx_tmp1 = ::com::gamejam::character::StatBar_obj::BORDER_SIZE;
HXDLIN(  70)		int _hx_tmp2 = ::com::gamejam::character::StatBar_obj::BORDER_SIZE;
HXDLIN(  70)		_hx_tmp->drawRoundRect(_hx_tmp1,_hx_tmp2,(fillPct * ::com::gamejam::character::StatBar_obj::FILL_WIDTH),::com::gamejam::character::StatBar_obj::FILL_HEIGHT,(int)20,(int)20);
HXLINE(  71)		this->fill->get_graphics()->endFill();
            	}


HX_DEFINE_DYNAMIC_FUNC1(StatBar_obj,drawStatBar,(void))

int StatBar_obj::BORDER_SIZE;

int StatBar_obj::BAR_WIDTH;

int StatBar_obj::BAR_HEIGHT;

int StatBar_obj::FILL_WIDTH;

int StatBar_obj::FILL_HEIGHT;

int StatBar_obj::BORDER_COLOR;

int StatBar_obj::MASK_COLOR;

int StatBar_obj::FILL_COLOR;


hx::ObjectPtr< StatBar_obj > StatBar_obj::__new() {
	hx::ObjectPtr< StatBar_obj > __this = new StatBar_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< StatBar_obj > StatBar_obj::__alloc(hx::Ctx *_hx_ctx) {
	StatBar_obj *__this = (StatBar_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(StatBar_obj), true, "com.gamejam.character.StatBar"));
	*(void **)__this = StatBar_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

StatBar_obj::StatBar_obj()
{
}

void StatBar_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StatBar);
	HX_MARK_MEMBER_NAME(border,"border");
	HX_MARK_MEMBER_NAME(borderMask,"borderMask");
	HX_MARK_MEMBER_NAME(fill,"fill");
	HX_MARK_MEMBER_NAME(statValue,"statValue");
	HX_MARK_MEMBER_NAME(deltaOverTime,"deltaOverTime");
	HX_MARK_MEMBER_NAME(statNameText,"statNameText");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void StatBar_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(border,"border");
	HX_VISIT_MEMBER_NAME(borderMask,"borderMask");
	HX_VISIT_MEMBER_NAME(fill,"fill");
	HX_VISIT_MEMBER_NAME(statValue,"statValue");
	HX_VISIT_MEMBER_NAME(deltaOverTime,"deltaOverTime");
	HX_VISIT_MEMBER_NAME(statNameText,"statNameText");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val StatBar_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"fill") ) { return hx::Val( fill ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { return hx::Val( border ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"statValue") ) { return hx::Val( statValue ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"borderMask") ) { return hx::Val( borderMask ); }
		if (HX_FIELD_EQ(inName,"updateStat") ) { return hx::Val( updateStat_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"drawStatBar") ) { return hx::Val( drawStatBar_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"statNameText") ) { return hx::Val( statNameText ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"deltaOverTime") ) { return hx::Val( deltaOverTime ); }
	}
	return super::__Field(inName,inCallProp);
}

bool StatBar_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"BAR_WIDTH") ) { outValue = ( BAR_WIDTH ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"BAR_HEIGHT") ) { outValue = ( BAR_HEIGHT ); return true; }
		if (HX_FIELD_EQ(inName,"FILL_WIDTH") ) { outValue = ( FILL_WIDTH ); return true; }
		if (HX_FIELD_EQ(inName,"MASK_COLOR") ) { outValue = ( MASK_COLOR ); return true; }
		if (HX_FIELD_EQ(inName,"FILL_COLOR") ) { outValue = ( FILL_COLOR ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"BORDER_SIZE") ) { outValue = ( BORDER_SIZE ); return true; }
		if (HX_FIELD_EQ(inName,"FILL_HEIGHT") ) { outValue = ( FILL_HEIGHT ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"BORDER_COLOR") ) { outValue = ( BORDER_COLOR ); return true; }
	}
	return false;
}

hx::Val StatBar_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"fill") ) { fill=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { border=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"statValue") ) { statValue=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"borderMask") ) { borderMask=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"statNameText") ) { statNameText=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"deltaOverTime") ) { deltaOverTime=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool StatBar_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"BAR_WIDTH") ) { BAR_WIDTH=ioValue.Cast< int >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"BAR_HEIGHT") ) { BAR_HEIGHT=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"FILL_WIDTH") ) { FILL_WIDTH=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"MASK_COLOR") ) { MASK_COLOR=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"FILL_COLOR") ) { FILL_COLOR=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"BORDER_SIZE") ) { BORDER_SIZE=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"FILL_HEIGHT") ) { FILL_HEIGHT=ioValue.Cast< int >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"BORDER_COLOR") ) { BORDER_COLOR=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void StatBar_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"));
	outFields->push(HX_HCSTRING("borderMask","\xf8","\x9f","\xf0","\x02"));
	outFields->push(HX_HCSTRING("fill","\x83","\xce","\xbb","\x43"));
	outFields->push(HX_HCSTRING("statValue","\xfd","\xaa","\x3b","\x95"));
	outFields->push(HX_HCSTRING("deltaOverTime","\x99","\x1f","\xc9","\xab"));
	outFields->push(HX_HCSTRING("statNameText","\x8c","\x80","\x94","\x82"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo StatBar_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(StatBar_obj,border),HX_HCSTRING("border","\xec","\x4c","\x1a","\x64")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(StatBar_obj,borderMask),HX_HCSTRING("borderMask","\xf8","\x9f","\xf0","\x02")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(StatBar_obj,fill),HX_HCSTRING("fill","\x83","\xce","\xbb","\x43")},
	{hx::fsFloat,(int)offsetof(StatBar_obj,statValue),HX_HCSTRING("statValue","\xfd","\xaa","\x3b","\x95")},
	{hx::fsFloat,(int)offsetof(StatBar_obj,deltaOverTime),HX_HCSTRING("deltaOverTime","\x99","\x1f","\xc9","\xab")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(StatBar_obj,statNameText),HX_HCSTRING("statNameText","\x8c","\x80","\x94","\x82")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo StatBar_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &StatBar_obj::BORDER_SIZE,HX_HCSTRING("BORDER_SIZE","\x34","\xb4","\xbe","\x3b")},
	{hx::fsInt,(void *) &StatBar_obj::BAR_WIDTH,HX_HCSTRING("BAR_WIDTH","\x1a","\x4b","\x24","\x7e")},
	{hx::fsInt,(void *) &StatBar_obj::BAR_HEIGHT,HX_HCSTRING("BAR_HEIGHT","\x33","\xe4","\xec","\x97")},
	{hx::fsInt,(void *) &StatBar_obj::FILL_WIDTH,HX_HCSTRING("FILL_WIDTH","\xea","\x0f","\xc5","\x52")},
	{hx::fsInt,(void *) &StatBar_obj::FILL_HEIGHT,HX_HCSTRING("FILL_HEIGHT","\x63","\x55","\xf8","\xcf")},
	{hx::fsInt,(void *) &StatBar_obj::BORDER_COLOR,HX_HCSTRING("BORDER_COLOR","\x70","\x62","\xa2","\xd8")},
	{hx::fsInt,(void *) &StatBar_obj::MASK_COLOR,HX_HCSTRING("MASK_COLOR","\x70","\x72","\x08","\xe4")},
	{hx::fsInt,(void *) &StatBar_obj::FILL_COLOR,HX_HCSTRING("FILL_COLOR","\x47","\xcb","\xbe","\xd2")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String StatBar_obj_sMemberFields[] = {
	HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"),
	HX_HCSTRING("borderMask","\xf8","\x9f","\xf0","\x02"),
	HX_HCSTRING("fill","\x83","\xce","\xbb","\x43"),
	HX_HCSTRING("statValue","\xfd","\xaa","\x3b","\x95"),
	HX_HCSTRING("deltaOverTime","\x99","\x1f","\xc9","\xab"),
	HX_HCSTRING("statNameText","\x8c","\x80","\x94","\x82"),
	HX_HCSTRING("updateStat","\x7d","\xce","\x10","\x05"),
	HX_HCSTRING("drawStatBar","\xbb","\xe6","\x8f","\x7f"),
	::String(null()) };

static void StatBar_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StatBar_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(StatBar_obj::BORDER_SIZE,"BORDER_SIZE");
	HX_MARK_MEMBER_NAME(StatBar_obj::BAR_WIDTH,"BAR_WIDTH");
	HX_MARK_MEMBER_NAME(StatBar_obj::BAR_HEIGHT,"BAR_HEIGHT");
	HX_MARK_MEMBER_NAME(StatBar_obj::FILL_WIDTH,"FILL_WIDTH");
	HX_MARK_MEMBER_NAME(StatBar_obj::FILL_HEIGHT,"FILL_HEIGHT");
	HX_MARK_MEMBER_NAME(StatBar_obj::BORDER_COLOR,"BORDER_COLOR");
	HX_MARK_MEMBER_NAME(StatBar_obj::MASK_COLOR,"MASK_COLOR");
	HX_MARK_MEMBER_NAME(StatBar_obj::FILL_COLOR,"FILL_COLOR");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StatBar_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StatBar_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(StatBar_obj::BORDER_SIZE,"BORDER_SIZE");
	HX_VISIT_MEMBER_NAME(StatBar_obj::BAR_WIDTH,"BAR_WIDTH");
	HX_VISIT_MEMBER_NAME(StatBar_obj::BAR_HEIGHT,"BAR_HEIGHT");
	HX_VISIT_MEMBER_NAME(StatBar_obj::FILL_WIDTH,"FILL_WIDTH");
	HX_VISIT_MEMBER_NAME(StatBar_obj::FILL_HEIGHT,"FILL_HEIGHT");
	HX_VISIT_MEMBER_NAME(StatBar_obj::BORDER_COLOR,"BORDER_COLOR");
	HX_VISIT_MEMBER_NAME(StatBar_obj::MASK_COLOR,"MASK_COLOR");
	HX_VISIT_MEMBER_NAME(StatBar_obj::FILL_COLOR,"FILL_COLOR");
};

#endif

hx::Class StatBar_obj::__mClass;

static ::String StatBar_obj_sStaticFields[] = {
	HX_HCSTRING("BORDER_SIZE","\x34","\xb4","\xbe","\x3b"),
	HX_HCSTRING("BAR_WIDTH","\x1a","\x4b","\x24","\x7e"),
	HX_HCSTRING("BAR_HEIGHT","\x33","\xe4","\xec","\x97"),
	HX_HCSTRING("FILL_WIDTH","\xea","\x0f","\xc5","\x52"),
	HX_HCSTRING("FILL_HEIGHT","\x63","\x55","\xf8","\xcf"),
	HX_HCSTRING("BORDER_COLOR","\x70","\x62","\xa2","\xd8"),
	HX_HCSTRING("MASK_COLOR","\x70","\x72","\x08","\xe4"),
	HX_HCSTRING("FILL_COLOR","\x47","\xcb","\xbe","\xd2"),
	::String(null())
};

void StatBar_obj::__register()
{
	hx::Object *dummy = new StatBar_obj;
	StatBar_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.gamejam.character.StatBar","\x43","\x2c","\xec","\x07");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &StatBar_obj::__GetStatic;
	__mClass->mSetStaticField = &StatBar_obj::__SetStatic;
	__mClass->mMarkFunc = StatBar_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(StatBar_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(StatBar_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< StatBar_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StatBar_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StatBar_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StatBar_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void StatBar_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d941454f8d559a6a_11_boot)
HXDLIN(  11)		BORDER_SIZE = (int)10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d941454f8d559a6a_12_boot)
HXDLIN(  12)		BAR_WIDTH = (int)200;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d941454f8d559a6a_13_boot)
HXDLIN(  13)		BAR_HEIGHT = (int)80;
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_d941454f8d559a6a_14_boot)
HXDLIN(  14)			int _hx_tmp = ::com::gamejam::character::StatBar_obj::BAR_WIDTH;
HXDLIN(  14)			return (_hx_tmp - ((int)2 * ::com::gamejam::character::StatBar_obj::BORDER_SIZE));
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_d941454f8d559a6a_14_boot)
HXDLIN(  14)		FILL_WIDTH =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_d941454f8d559a6a_15_boot)
HXDLIN(  15)			int _hx_tmp = ::com::gamejam::character::StatBar_obj::BAR_HEIGHT;
HXDLIN(  15)			return (_hx_tmp - ((int)2 * ::com::gamejam::character::StatBar_obj::BORDER_SIZE));
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_d941454f8d559a6a_15_boot)
HXDLIN(  15)		FILL_HEIGHT =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            	HX_STACKFRAME(&_hx_pos_d941454f8d559a6a_17_boot)
HXDLIN(  17)		BORDER_COLOR = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d941454f8d559a6a_18_boot)
HXDLIN(  18)		MASK_COLOR = (int)16777215;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d941454f8d559a6a_19_boot)
HXDLIN(  19)		FILL_COLOR = (int)65280;
            	}
}

} // end namespace com
} // end namespace gamejam
} // end namespace character
